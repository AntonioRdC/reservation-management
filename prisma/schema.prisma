datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  booking  Booking[]
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

// ...

model Space {
  id          String   @id @default(cuid())
  name        String
  description String?
  capacity    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  bookings Booking[]
}

model Resource {
  id        String   @id @default(cuid())
  name      String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  bookings ResourceBooking[]
}

model Booking {
  id        String        @id @default(cuid())
  spaceId   String
  userId    String
  startTime DateTime
  endTime   DateTime
  image     String?
  category  CategoryType
  status    BookingStatus @default(REQUESTED)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  resources ResourceBooking[]

  space Space @relation(fields: [spaceId], references: [id])
  user  User  @relation(fields: [userId], references: [id])
}

model ResourceBooking {
  bookingId  String
  resourceId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  booking  Booking  @relation(fields: [bookingId], references: [id])
  resource Resource @relation(fields: [resourceId], references: [id])

  @@id([bookingId, resourceId])
}

enum BookingStatus {
  REQUESTED
  CONFIRMED
  CANCELLED
}

enum CategoryType {
  PRESENTIAL_COURSE
  ONLINE_COURSE
  CONSULTANCY
  VIDEOS
}
